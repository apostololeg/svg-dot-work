name: Deploy to VPS

on:
  push:
    branches: [main, master] # Adjust branch name as needed
  workflow_dispatch: # Allows manual trigger

jobs:
  'build-and-deploy':
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Setup SSH
        run: |
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Add SSH key
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          # Add VPS to known hosts with retries
          for i in {1..3}; do
            if ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "Successfully added ${{ secrets.VPS_HOST }} to known_hosts"
              break
            else
              echo "Attempt $i failed, retrying..."
              sleep 2
            fi
          done

          # Verify known_hosts was populated
          if [ ! -s ~/.ssh/known_hosts ]; then
            echo "Failed to add host keys, using StrictHostKeyChecking=no"
            echo "Host ${{ secrets.VPS_HOST }}" >> ~/.ssh/config
            echo "  StrictHostKeyChecking no" >> ~/.ssh/config
            echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
          fi

          chmod 644 ~/.ssh/known_hosts ~/.ssh/config 2>/dev/null || true

      - name: Deploy to VPS
        run: |
          # Create backup of current deployment
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            if [ -d ${{ secrets.VPS_DEPLOY_PATH }} ] && [ \$(ls -A ${{ secrets.VPS_DEPLOY_PATH }} 2>/dev/null | wc -l) -gt 0 ]; then
              BACKUP_DIR=${{ secrets.VPS_DEPLOY_PATH }}.backup.\$(date +%Y%m%d_%H%M%S)
              sudo cp -r ${{ secrets.VPS_DEPLOY_PATH }} \"\$BACKUP_DIR\"
              sudo chown -R ci:ci \"\$BACKUP_DIR\"
              echo \"Created backup: \$BACKUP_DIR\"
            fi
          "

          # Clear deployment directory
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            sudo rm -rf ${{ secrets.VPS_DEPLOY_PATH }}/*
          "

          # Upload new build to temporary directory
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/temp_deploy"
          scp -i ~/.ssh/id_ed25519 -r dist/* ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/temp_deploy/

          # Move files to deployment directory and set proper permissions
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            sudo cp -r ~/temp_deploy/* ${{ secrets.VPS_DEPLOY_PATH }}/
            sudo chown -R www-data:www-data ${{ secrets.VPS_DEPLOY_PATH }}
            sudo find ${{ secrets.VPS_DEPLOY_PATH }} -type d -exec chmod 755 {} \;
            sudo find ${{ secrets.VPS_DEPLOY_PATH }} -type f -exec chmod 644 {} \;
            rm -rf ~/temp_deploy
          "

          # Reload nginx
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            sudo systemctl reload nginx
          "

          # Cleanup old backups (keep only last 3)
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd /var/www
            ls -td ${{ secrets.VPS_DEPLOY_PATH }}.backup.* 2>/dev/null | tail -n +4 | xargs -r rm -rf
            echo 'Cleaned up old backups'
          "

      - name: Health check
        run: |
          # Wait a moment for the deployment to settle
          sleep 10

          # Check if the site is responding (follow redirects and accept 200, 301, 302)
          HTTP_STATUS=$(curl -s -L -o /dev/null -w "%{http_code}" http://${{ secrets.VPS_HOST }})

          if [ $HTTP_STATUS -eq 200 ] || [ $HTTP_STATUS -eq 301 ] || [ $HTTP_STATUS -eq 302 ]; then
            echo "✅ Health check passed! Site is responding with HTTP $HTTP_STATUS"
          else
            echo "❌ Health check failed! Site returned HTTP $HTTP_STATUS"
            echo "Rolling back deployment..."

            # Rollback logic
            ssh -i ~/.ssh/id_ed25519 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
              BACKUP_DIR=\$(ls -td ${{ secrets.VPS_DEPLOY_PATH }}.backup.* 2>/dev/null | head -n1)
              if [ ! -z \"\$BACKUP_DIR\" ] && [ -d \"\$BACKUP_DIR\" ]; then
                echo \"Found backup directory: \$BACKUP_DIR\"
                sudo rm -rf ${{ secrets.VPS_DEPLOY_PATH }}/*
                sudo cp -r \"\$BACKUP_DIR\"/* ${{ secrets.VPS_DEPLOY_PATH }}/
                sudo chown -R www-data:www-data ${{ secrets.VPS_DEPLOY_PATH }}
                sudo systemctl reload nginx
                echo 'Rollback completed successfully'
              else
                echo 'No backup directory found, cannot rollback'
              fi
            "
            exit 1
          fi
